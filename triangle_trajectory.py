import time

import cflib.crtp
from cflib.crazyflie import Crazyflie
from cflib.crazyflie.log import LogConfig
from cflib.crazyflie.mem import MemoryElement
from cflib.crazyflie.mem import Poly4D
from cflib.crazyflie.syncCrazyflie import SyncCrazyflie
from cflib.crazyflie.syncLogger import SyncLogger
import concurrent.futures

from cflib.utils import uri_helper

# URI to the Crazyflie to connect to
#URI_SUN = 'radio://0/30/2M/E7E7E7E7E1'
URI_DRONE1 = 'radio://0/80/2M/E7E7E7E7E1'
URI_DRONE2 = 'radio://0/20/2M/E7E7E7E7E1'
URI_DRONE3 = 'radio://0/60/2M/E7E7E7E7E1'

# Duration,x^0,x^1,x^2,x^3,x^4,x^5,x^6,x^7,y^0,y^1,y^2,y^3,y^4,y^5,y^6,y^7,z^0,z^1,z^2,z^3,z^4,z^5,z^6,z^7,yaw^0,yaw^1,yaw^2,yaw^3,yaw^4,yaw^5,yaw^6,yaw^7
drone1_trajectory = [
    [1.333333, 0.574721, -0.0, 0.0, -0.277513, 0.160513, 0.100562, -0.124963, 0.032173, 0.040907, 0.0, -0.0, 2.011277, -2.279605, -0.2258, 1.194418, -0.393162, 0.999441, -0.0, 0.0, 0.013296, -0.013628, -0.007055, 0.011895, -0.003385, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, 0.386883, -0.263211, -0.091276, 0.001048, 0.042035, -0.002692, -0.020204, 0.007479, 0.417809, 0.280864, 0.208816, -1.027159, 0.79835, 0.248327, -0.506399, 0.150181, 0.999635, -0.002151, 0.004986, 0.004708, -0.008372, -0.002775, 0.006217, -0.001825, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, -0.059838, -0.361722, 0.001452, 0.046805, -0.007041, -0.01306, 0.00907, -0.001615, 0.578212, -0.043806, -0.214778, 0.250967, -0.109244, -0.125474, 0.124791, -0.029555, 0.9999, -0.001555, 0.001978, 0.003579, -0.003918, -0.001816, 0.002779, -0.000714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, -0.467032, -0.215554, 0.091064, 0.028406, -0.012275, -0.008557, 0.009267, -0.002239, 0.33859, -0.303876, -0.049836, 0.084358, -0.104265, -0.00907, 0.067934, -0.024054, 1.000051, -0.000878, -2.1e-05, 0.003124, -0.001937, -0.001255, 0.001282, -0.000263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, -0.564769, 0.073439, 0.112153, 0.002525, -0.009191, -0.002663, 0.003341, -0.000727, -0.12147, -0.347205, 0.052361, -0.07322, 0.051365, 0.040834, -0.042945, 0.009635, 1.000071, -0.000401, -0.000438, 0.002154, -0.001294, -0.000809, 0.000949, -0.000225, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, -0.288425, 0.312647, 0.055177, -0.015827, -0.003476, 0.002023, -0.002622, 0.000932, -0.499583, -0.172666, 0.091996, -0.043478, 0.062117, 0.019636, -0.047683, 0.014719, 1.000007, -1e-06, 0.000256, 0.000944, -0.001587, -0.000595, 0.001387, -0.000423, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, 0.178809, 0.344772, -0.039033, -0.019553, 0.001801, 0.003681, -0.004995, 0.001579, -0.547892, 0.113341, 0.088158, 0.004583, 0.017092, -0.005508, -0.015508, 0.006881, 0.999803, -0.000286, 0.001354, 0.000905, -0.001868, -0.000786, 0.001512, -0.000427, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, 0.527731, 0.147449, -0.10786, -0.006648, 0.004881, 0.001662, -0.003781, 0.001298, -0.233963, 0.326392, 0.031916, 0.023712, -0.020251, -0.017336, 0.012227, -0.00145, 1.000054, -0.000553, 0.00029, 0.001385, -0.001478, -0.000656, 0.001226, -0.000357, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, 0.527725, -0.147665, -0.107432, 0.013196, 0.004989, -0.002015, -0.000571, 0.000444, 0.234951, 0.324124, -0.048827, 0.026787, -0.038099, -0.018903, 0.028544, -0.00742, 0.999896, 0.000186, 0.001039, 0.000459, -0.002057, -0.000651, 0.001814, -0.000565, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, 0.178519, -0.345293, -0.036988, 0.026011, 0.002083, -0.004783, 0.002544, -0.000451, 0.548533, 0.106722, -0.099525, 0.02001, -0.036056, -0.010701, 0.030227, -0.009726, 0.999796, -0.000734, 0.001524, 0.001448, -0.0019, -0.000985, 0.001413, -0.00035, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, -0.288627, -0.314444, 0.056607, 0.022823, -0.001784, -0.004654, 0.003512, -0.000824, 0.499251, -0.181199, -0.085456, -0.005428, -0.002257, 0.010421, 0.00146, -0.002364, 1.000116, -0.000587, -0.000318, 0.002044, -0.001125, -0.000763, 0.000788, -0.000171, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, -0.564837, -0.075817, 0.112174, 0.005969, -0.004134, -0.001824, 0.001609, -0.000382, 0.120138, -0.350812, -0.024195, -0.024465, 0.059206, 0.021241, -0.052776, 0.017355, 0.999994, -4.1e-05, 2.3e-05, 0.000945, -0.001167, -0.000445, 0.001001, -0.00031, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, -0.466929, 0.212795, 0.091215, -0.014456, -0.001919, 0.003101, -0.003099, 0.000775, -0.3385, -0.300597, 0.046793, 0.086692, -0.010806, -0.063399, 0.037185, -0.004439, 0.999954, 5.7e-05, 0.000784, -7.6e-05, -0.001444, -0.000192, 0.001363, -0.000493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, -0.059914, 0.361867, 0.008096, -0.030734, 0.008646, 0.010309, -0.013691, 0.003854, -0.576249, -0.052144, 0.145597, 0.173858, -0.307453, -0.063215, 0.27936, -0.104506, 0.999839, 0.000107, 0.001554, -0.001062, -0.001376, 0.00017, 0.001292, -0.000527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, 0.386833, 0.269845, -0.086252, -0.024086, 0.043964, 0.007243, -0.056742, 0.025222, -0.426204, 0.302327, 0.058678, -0.906176, 1.188632, 0.679078, -1.52416, 0.531643, 0.999908, 0.000173, 0.001284, -0.002412, 0.000364, 0.001114, -0.000485, 1.2e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
]

drone2_trajectory = [
    [1.333333, -0.323717, -0.0, -0.0, -1.520223, 1.696371, 0.294231, -1.003486, 0.321536, 0.476658, 0.0, 0.0, -1.184248, 1.117982, 0.342229, -0.752114, 0.227893, 0.999441, -0.0, 0.0, 0.013296, -0.013628, -0.007055, 0.011895, -0.003385, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, -0.555393, -0.100064, -0.130643, 0.752596, -0.522337, -0.239185, 0.376283, -0.105242, 0.126477, -0.361053, -0.188423, 0.415498, -0.193768, -0.162677, 0.17379, -0.041858, 0.999635, -0.002151, 0.004986, 0.004708, -0.008372, -0.002775, 0.006217, -0.001825, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, -0.470125, 0.207834, 0.163883, -0.088392, -0.046279, 0.062512, -0.00173, -0.007718, -0.340047, -0.307601, 0.085483, 0.098815, -0.118201, -0.018193, 0.076881, -0.02585, 0.9999, -0.001555, 0.001978, 0.003579, -0.003918, -0.001816, 0.002779, -0.000714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, -0.061566, 0.375197, 0.033449, -0.159627, 0.104837, 0.054483, -0.082575, 0.022762, -0.575905, -0.033667, 0.145898, -0.069696, 0.016896, 0.031252, -0.018014, 0.001776, 1.000051, -0.000878, -2.1e-05, 0.003124, -0.001937, -0.001255, 0.001282, -0.000263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, 0.387273, 0.275438, -0.095733, -0.02872, 0.040872, 0.003823, -0.0285, 0.010239, -0.429437, 0.252133, 0.091304, -0.081523, 0.044086, 0.030088, -0.037696, 0.009391, 1.000071, -0.000401, -0.000438, 0.002154, -0.001294, -0.000809, 0.000949, -0.000225, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, 0.578121, -0.002945, -0.129002, 0.038779, -0.009579, -0.016782, 0.010746, -0.001297, 0.000494, 0.370526, -0.007391, -0.059799, 0.036781, 0.020555, -0.031834, 0.008824, 1.000007, -1e-06, 0.000256, 0.000944, -0.001587, -0.000595, 0.001387, -0.000423, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, 0.386444, -0.27546, -0.079183, 0.055336, -0.022925, -0.019123, 0.021508, -0.005074, 0.429753, 0.24763, -0.095283, -0.031247, 0.026352, 0.011313, -0.021372, 0.006343, 0.999803, -0.000286, 0.001354, 0.000905, -0.001868, -0.000786, 0.001512, -0.000427, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, -0.060638, -0.366774, 0.015011, 0.051525, -0.02191, -0.0172, 0.019639, -0.004691, 0.574865, -0.035368, -0.122888, -0.001121, 0.017525, 0.003213, -0.011201, 0.003636, 1.000054, -0.000553, 0.00029, 0.001385, -0.001478, -0.000656, 0.001226, -0.000357, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, -0.46738, -0.219461, 0.095554, 0.040956, -0.022875, -0.016666, 0.01782, -0.003957, 0.339814, -0.292317, -0.073541, 0.020639, 0.009339, -0.002432, -0.002926, 0.001224, 0.999896, 0.000186, 0.001039, 0.000459, -0.002057, -0.000651, 0.001814, -0.000565, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, -0.565087, 0.068452, 0.114948, 0.029744, -0.032346, -0.018477, 0.023543, -0.005672, -0.119764, -0.354086, 0.020564, 0.023867, 0.002171, -0.003464, 0.001854, -0.000519, 0.999796, -0.000734, 0.001524, 0.001448, -0.0019, -0.000985, 0.001413, -0.00035, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, -0.289269, 0.307106, 0.065072, 0.01741, -0.047223, -0.017551, 0.036412, -0.010835, -0.499952, -0.179645, 0.099051, 0.00435, -0.000229, 0.002029, 0.000425, -0.000823, 1.000116, -0.000587, -0.000318, 0.002044, -0.001125, -0.000763, 0.000788, -0.000171, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, 0.177365, 0.342879, -0.017673, -0.01883, -0.038898, 0.004939, 0.028434, -0.011875, -0.549026, 0.115976, 0.109461, -0.031639, 0.011432, 0.014902, -0.014322, 0.002942, 0.999994, -4.1e-05, 2.3e-05, 0.000945, -0.001167, -0.000445, 0.001001, -0.00031, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, 0.527155, 0.156417, -0.093747, -0.104113, 0.074847, 0.064756, -0.08418, 0.022837, -0.234291, 0.336611, 0.03947, -0.059266, 0.045728, 0.02525, -0.048828, 0.015356, 0.999954, 5.7e-05, 0.000784, -7.6e-05, -0.001444, -0.000192, 0.001363, -0.000493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, 0.529804, -0.146082, -0.146674, -0.018269, 0.169031, -0.025653, -0.125269, 0.056268, 0.235826, 0.327746, -0.067228, 0.017311, 0.019443, -0.035586, -0.004475, 0.008799, 0.999839, 0.000107, 0.001554, -0.001062, -0.001376, 0.00017, 0.001292, -0.000527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, 0.17478, -0.39161, 0.015851, 0.712681, -1.027875, -0.477371, 1.23632, -0.442944, 0.546607, 0.095744, -0.06756, 0.249588, -0.446173, -0.167009, 0.513023, -0.186838, 0.999908, 0.000173, 0.001284, -0.002412, 0.000364, 0.001114, -0.000485, 1.2e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
]

drone3_trajectory = [
    [1.333333, -0.252229, 0.0, 0.0, 1.900557, -2.090305, -0.237897, 1.110873, -0.362718, -0.519419, 0.0, 0.0, -0.664298, 0.776371, 0.167979, -0.496615, 0.157322, 0.999441, -0.0, 0.0, 0.013296, -0.013628, -0.007055, 0.011895, -0.003385, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, 0.168198, 0.379101, 0.231911, -0.936279, 0.714018, 0.230643, -0.45937, 0.135739, -0.5442, 0.103873, -0.015407, 0.321909, -0.196459, -0.119608, 0.151788, -0.039193, 0.999635, -0.002151, 0.004986, 0.004708, -0.008372, -0.002775, 0.006217, -0.001825, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, 0.531055, 0.142733, -0.195382, 0.209694, -0.093709, -0.110748, 0.108252, -0.025316, -0.235752, 0.323148, 0.069096, 0.00827, -0.074864, 0.004603, 0.040822, -0.015498, 0.9999, -0.001555, 0.001978, 0.003579, -0.003918, -0.001816, 0.002779, -0.000714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, 0.526788, -0.157177, -0.089701, 0.07258, -0.096066, -0.008566, 0.062789, -0.02213, 0.233604, 0.337026, -0.02348, -0.088266, 0.028279, 0.032625, -0.02599, 0.004824, 1.000051, -0.000878, -2.1e-05, 0.003124, -0.001937, -0.001255, 0.001282, -0.000263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, 0.177084, -0.338317, -0.008809, -0.063318, 0.046058, 0.036557, -0.037271, 0.008169, 0.548978, 0.119959, -0.106764, -0.055917, 0.042233, 0.022211, -0.030884, 0.008046, 1.000071, -0.000401, -0.000438, 0.002154, -0.001294, -0.000809, 0.000949, -0.000225, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, -0.288348, -0.306173, 0.051739, -0.03105, 0.058025, 0.017051, -0.04246, 0.013061, 0.500399, -0.175975, -0.105602, -0.009957, 0.030186, 0.008452, -0.018977, 0.00556, 1.000007, -1e-06, 0.000256, 0.000944, -0.001587, -0.000595, 0.001387, -0.000423, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, -0.563676, -0.074035, 0.093583, 0.013452, 0.017377, -0.005937, -0.014018, 0.006233, 0.120473, -0.352053, -0.030738, 0.016657, 0.015833, -9.5e-05, -0.007943, 0.002672, 0.999803, -0.000286, 0.001354, 0.000905, -0.001868, -0.000786, 0.001512, -0.000427, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, -0.466296, 0.208927, 0.079041, 0.02549, -0.017725, -0.016143, 0.010446, -0.001077, -0.339065, -0.292301, 0.062429, 0.018433, 0.004929, -0.00253, -0.002065, 0.000907, 1.000054, -0.000553, 0.00029, 0.001385, -0.001478, -0.000656, 0.001226, -0.000357, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, -0.060211, 0.354245, 0.009185, 0.02004, -0.035233, -0.016635, 0.024652, -0.006293, -0.574014, -0.037309, 0.111108, 0.002142, -0.001251, -0.000343, -0.000759, 0.000248, 0.999896, 0.000186, 0.001039, 0.000459, -0.002057, -0.000651, 0.001814, -0.000565, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, 0.38586, 0.264474, -0.068987, 0.008981, -0.034176, -0.008953, 0.026379, -0.008399, -0.428963, 0.243678, 0.084149, -0.019198, -0.002445, 0.004149, -0.001891, 0.00012, 0.999796, -0.000734, 0.001524, 0.001448, -0.0019, -0.000985, 0.001413, -0.00035, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, 0.576693, -0.000467, -0.102499, -0.010946, -0.005105, 0.008742, 0.002922, -0.002494, 6.4e-05, 0.364983, 0.000611, -0.034835, 0.002585, 0.01021, -0.005523, 0.000517, 1.000116, -0.000587, -0.000318, 0.002044, -0.001125, -0.000763, 0.000788, -0.000171, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, 0.386341, -0.266649, -0.075712, -0.020138, 0.047691, 0.017279, -0.041681, 0.013677, 0.429257, 0.247363, -0.08523, -0.044186, 0.022029, 0.020252, -0.021026, 0.004731, 0.999994, -4.1e-05, 2.3e-05, 0.000945, -0.001167, -0.000445, 0.001001, -0.00031, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, -0.059711, -0.366648, -0.003638, 0.078316, -0.008007, -0.052861, 0.032036, -0.004186, 0.575086, -0.032224, -0.125075, -0.040122, 0.066711, 0.026548, -0.061643, 0.020002, 0.999954, 5.7e-05, 0.000784, -7.6e-05, -0.001444, -0.000192, 0.001363, -0.000493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, -0.468823, -0.224542, 0.119557, 0.151597, -0.250869, -0.052087, 0.230048, -0.086251, 0.340867, -0.29959, -0.096978, 0.077864, 0.028062, -0.057779, -0.000491, 0.010784, 0.999839, 0.000107, 0.001554, -0.001062, -0.001376, 0.00017, 0.001292, -0.000527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [1.333333, -0.56228, 0.125306, 0.088659, -0.747232, 0.990068, 0.565006, -1.266096, 0.44036, -0.123183, -0.378175, 0.075272, 0.369965, -0.596468, -0.225544, 0.690847, -0.25536, 0.999908, 0.000173, 0.001284, -0.002412, 0.000364, 0.001114, -0.000485, 1.2e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
]

class Uploader:
    def __init__(self):
        self._is_done = False

    def upload(self, trajectory_mem):
        print('Uploading data')
        trajectory_mem.write_data(self._upload_done)

        while not self._is_done:
            time.sleep(0.2)

    def _upload_done(self, mem, addr):
        print('Data uploaded')
        self._is_done = True


def wait_for_position_estimator(scf):
    print('Waiting for estimator to find position...')

    log_config = LogConfig(name='Kalman Variance', period_in_ms=500)
    log_config.add_variable('kalman.varPX', 'float')
    log_config.add_variable('kalman.varPY', 'float')
    log_config.add_variable('kalman.varPZ', 'float')

    var_y_history = [1000] * 10
    var_x_history = [1000] * 10
    var_z_history = [1000] * 10

    threshold = 0.001

    with SyncLogger(scf, log_config) as logger:
        for log_entry in logger:
            data = log_entry[1]

            var_x_history.append(data['kalman.varPX'])
            var_x_history.pop(0)
            var_y_history.append(data['kalman.varPY'])
            var_y_history.pop(0)
            var_z_history.append(data['kalman.varPZ'])
            var_z_history.pop(0)

            min_x = min(var_x_history)
            max_x = max(var_x_history)
            min_y = min(var_y_history)
            max_y = max(var_y_history)
            min_z = min(var_z_history)
            max_z = max(var_z_history)

            # print("{} {} {}".
            #       format(max_x - min_x, max_y - min_y, max_z - min_z))

            if (max_x - min_x) < threshold and (
                    max_y - min_y) < threshold and (
                    max_z - min_z) < threshold:
                break


def reset_estimator(cf):
    cf.param.set_value('kalman.resetEstimation', '1')
    time.sleep(0.1)
    cf.param.set_value('kalman.resetEstimation', '0')

    wait_for_position_estimator(cf)


def activate_high_level_commander(cf):
    cf.param.set_value('commander.enHighLevel', '1')


def activate_mellinger_controller(cf):
    cf.param.set_value('stabilizer.controller', '2')


def upload_trajectory(cf, trajectory_id, trajectory):
    trajectory_mem = cf.mem.get_mems(MemoryElement.TYPE_TRAJ)[0]

    total_duration = 0
    for row in trajectory:
        duration = row[0]
        x = Poly4D.Poly(row[1:9])
        y = Poly4D.Poly(row[9:17])
        z = Poly4D.Poly(row[17:25])
        yaw = Poly4D.Poly(row[25:33])
        trajectory_mem.poly4Ds.append(Poly4D(duration, x, y, z, yaw))
        total_duration += duration

    Uploader().upload(trajectory_mem)
    cf.high_level_commander.define_trajectory(trajectory_id, 0,
                                              len(trajectory_mem.poly4Ds))
    return total_duration

def run_sequence(cf, trajectory_id, duration):
    commander = cf.high_level_commander

    try:
        relative = True
        commander.start_trajectory(trajectory_id, 1.0, relative)
        time.sleep(duration)
        commander.land(0.0, 5.0)
        time.sleep(5)
        commander.stop()

    except KeyboardInterrupt:
        print("Emergency stop!")
        commander.stop()  # 비상 정지

    finally:
        commander.stop()


if __name__ == '__main__':
    cflib.crtp.init_drivers(enable_debug_driver=False)

    # Create a thread pool to run drones in parallel
    with SyncCrazyflie(URI_DRONE1, cf=Crazyflie(rw_cache='./cache')) as scf_drone1, \
         SyncCrazyflie(URI_DRONE2, cf=Crazyflie(rw_cache='./cache')) as scf_drone2, \
         SyncCrazyflie(URI_DRONE3, cf=Crazyflie(rw_cache='./cache')) as scf_drone3:

        drone1 = scf_drone1.cf
        drone2 = scf_drone2.cf
        drone3 = scf_drone3.cf
        drone1_trajectory_id = 1
        drone2_trajectory_id = 2
        drone3_trajectory_id = 3

        activate_high_level_commander(drone1)
        activate_high_level_commander(drone2)
        activate_high_level_commander(drone3)

        hlc_drone1 = scf_drone1.cf.high_level_commander
        hlc_drone2 = scf_drone2.cf.high_level_commander
        hlc_drone3 = scf_drone3.cf.high_level_commander

        reset_estimator(drone1)
        reset_estimator(drone2)
        reset_estimator(drone3)
        
        # Upload the trajectories
        drone1_duration = upload_trajectory(drone1, drone1_trajectory_id, drone1_trajectory)
        drone2_duration = upload_trajectory(drone2, drone2_trajectory_id, drone2_trajectory)
        drone3_duration = upload_trajectory(drone3, drone3_trajectory_id, drone3_trajectory)

        print('The drone1 sequence is {:.1f} seconds long'.format(drone1_duration))
        print('The drone2 sequence is {:.1f} seconds long'.format(drone2_duration))
        print('The drone3 sequence is {:.1f} seconds long'.format(drone3_duration))

        hlc_drone1.takeoff(1.0, 5.0)
        hlc_drone2.takeoff(1.0, 5.0)
        hlc_drone3.takeoff(1.0, 5.0)
        time.sleep(5)
               #may have to change these values
        hlc_drone1.go_to(0.577,0.0,1.0, 0, 5.0, relative=False)
        hlc_drone2.go_to(-0.289,0.5,1.0, 0, 5.0, relative=False)
        hlc_drone3.go_to(-0.289,-0.5,1.0, 0, 5.0, relative=False)
        time.sleep(5)

        # Use ThreadPoolExecutor to run all drones simultaneously
        with concurrent.futures.ThreadPoolExecutor(max_workers=3) as executor:
            futures = []
            # Submit the sequences for each drone to run in parallel
            futures.append(executor.submit(run_sequence, drone1, drone1_trajectory_id, drone1_duration))
            futures.append(executor.submit(run_sequence, drone2, drone2_trajectory_id, drone2_duration))
            futures.append(executor.submit(run_sequence, drone3, drone3_trajectory_id, drone3_duration))
            
            # Wait for all drones to finish
            concurrent.futures.wait(futures)
