import time

import cflib.crtp
from cflib.crazyflie import Crazyflie
from cflib.crazyflie.log import LogConfig
from cflib.crazyflie.mem import MemoryElement
from cflib.crazyflie.mem import Poly4D
from cflib.crazyflie.syncCrazyflie import SyncCrazyflie
from cflib.crazyflie.syncLogger import SyncLogger
import concurrent.futures

from cflib.utils import uri_helper

# URI to the Crazyflie to connect to
#URI_SUN = 'radio://0/30/2M/E7E7E7E7E1'
URI_DRONE1 = 'radio://0/10/2M/E7E7E7E7E1'
URI_DRONE2 = 'radio://0/20/2M/E7E7E7E7E1'
URI_DRONE3 = 'radio://0/30/2M/E7E7E7E7E1'
URI_DRONE4 = 'radio://0/50/2M/E7E7E7E7E1'
URI_DRONE5 = 'radio://0/60/2M/E7E7E7E7E1'
URI_DRONE6 = 'radio://0/80/2M/E7E7E7E7E1'

# Duration,x^0,x^1,x^2,x^3,x^4,x^5,x^6,x^7,y^0,y^1,y^2,y^3,y^4,y^5,y^6,y^7,z^0,z^1,z^2,z^3,z^4,z^5,z^6,z^7,yaw^0,yaw^1,yaw^2,yaw^3,yaw^4,yaw^5,yaw^6,yaw^7
drone1_trajectory = [
    [2.0, 0.396246, 0.0, -0.0, -0.131152, 0.03983, 0.043832, -0.030239, 0.005263, 0.028552, 0.0, -0.0, 1.717674, -3.106154, 2.265862, -0.758383, 0.096433, 0.999708, -0.0, -0.0, 0.004137, -0.003961, -0.00047, 0.001324, -0.000308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.125276, -0.240859, -0.045194, 0.049688, -0.003265, -0.01798, 0.010345, -0.00171, 0.385996, 0.076647, -0.181506, 0.16424, 0.00823, -0.140602, 0.083735, -0.014718, 0.99966, 0.001386, 0.002762, -0.007126, 0.001966, 0.003014, -0.002001, 0.000342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.324102, -0.148072, 0.069872, 0.001963, -9.7e-05, 0.001404, -0.000962, 0.000154, 0.234824, -0.179564, -0.040422, -0.23819, 0.449325, -0.317121, 0.100577, -0.011908, 1.000165, 0.000239, -0.001729, 0.000826, 0.000725, -0.000315, -0.000128, 5.1e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.323627, 0.148171, 0.063823, -0.010666, -0.00339, 0.003518, -0.001876, 0.000334, -0.237507, -0.214899, 0.08074, 0.095313, -0.252182, 0.218904, -0.080281, 0.010715, 1.000167, -0.000576, -0.001146, 0.001998, -2.2e-05, -0.000843, 0.000343, -3.8e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.123735, 0.237982, -0.02572, -0.01005, -0.004229, 0.00218, -0.000329, 2e-05, -0.378307, 0.080633, 0.045561, -0.010565, 0.09729, -0.107822, 0.044137, -0.006351, 1.000116, -0.000678, -0.000583, 0.001524, -8.7e-05, -0.000654, 0.000283, -3.4e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.399991, -0.000735, -0.078791, 0.001745, 0.001907, -0.001149, 0.000842, -0.000167, -0.001171, 0.252579, 0.016256, -0.039851, -0.009542, 0.029699, -0.015632, 0.002603, 1.000113, -0.000532, -0.000482, 0.001158, -3.7e-05, -0.000483, 0.000192, -2e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.123638, -0.23879, -0.024303, 0.012495, 0.005866, -0.003464, 0.000907, -0.000103, 0.380679, 0.074903, -0.078225, 0.028461, -0.053666, 0.039529, -0.012619, 0.001497, 1.00008, -0.000453, -0.000397, 0.001071, -4.4e-05, -0.000505, 0.000217, -2.5e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.323371, -0.147623, 0.062587, 0.008144, 0.00202, -0.002188, 0.000125, 7.2e-05, 0.235569, -0.203562, -0.055576, -0.000333, 0.089067, -0.104233, 0.047618, -0.007622, 1.000006, -0.000445, -3.3e-05, 0.001321, -0.000316, -0.000911, 0.000568, -9.3e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.323584, 0.146352, 0.063343, -0.002839, -0.00674, -0.001867, 0.002489, -0.00053, -0.234886, -0.190096, 0.04808, -0.106296, 0.173965, -0.083665, 0.008504, 0.001852, 0.999785, -0.000339, 0.001237, 0.00114, -0.001302, -0.001219, 0.00126, -0.000267, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.123672, 0.241096, -0.02361, -0.03003, 0.001184, 0.026862, -0.020545, 0.0044, -0.385692, 0.062709, 0.177634, 0.336486, -1.391828, 1.537193, -0.689665, 0.109749, 0.999779, 0.001315, 0.002119, -0.00611, -0.000111, 0.005718, -0.003444, 0.000605, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
]

drone2_trajectory = [
    [2.0, -0.226931, -0.0, 0.0, -1.105592, 1.867017, -1.240519, 0.374181, -0.04255, 0.330833, 0.0, 0.0, -1.080414, 1.837307, -1.307125, 0.431434, -0.054332, 0.999708, -0.0, -0.0, 0.004137, -0.003961, -0.00047, 0.001324, -0.000308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.394851, 0.016163, 0.143022, 0.250621, -0.651634, 0.539814, -0.193089, 0.025447, -0.086261, -0.246475, 0.076038, -0.063365, -0.035676, 0.104324, -0.056215, 0.009491, 0.99966, 0.001386, 0.002762, -0.007126, 0.001966, 0.003014, -0.002001, 0.000342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.037966, 0.255958, -0.047966, -0.013528, 0.154343, -0.172066, 0.070728, -0.01016, -0.39739, -0.039883, 0.071692, 0.144599, -0.243781, 0.164594, -0.050591, 0.005807, 1.000165, 0.000239, -0.001729, 0.000826, 0.000725, -0.000315, -0.000128, 5.1e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.363315, 0.103418, -0.043192, -0.034729, -0.038323, 0.067005, -0.031202, 0.004807, -0.16163, 0.236573, 0.016356, -0.064692, 0.133169, -0.1123, 0.040197, -0.005256, 1.000167, -0.000576, -0.001146, 0.001998, -2.2e-05, -0.000843, 0.000343, -3.8e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.268901, -0.189335, -0.069197, 0.038381, 0.01206, -0.033139, 0.017369, -0.002855, 0.296277, 0.165997, -0.044845, -0.003469, -0.051762, 0.054187, -0.021278, 0.002982, 1.000116, -0.000678, -0.000583, 0.001524, -8.7e-05, -0.000654, 0.000283, -3.4e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.200832, -0.21497, 0.049384, -0.010463, 0.008015, 0.009375, -0.007634, 0.001455, 0.346881, -0.125724, -0.075586, 0.015531, 0.012497, -0.018171, 0.008802, -0.001426, 1.000113, -0.000532, -0.000482, 0.001158, -3.7e-05, -0.000483, 0.000192, -2e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.391113, 0.049356, 0.07423, 0.021761, -0.029219, 0.006256, 0.002586, -0.000923, -0.083309, -0.244082, 0.018426, -0.001275, 0.024087, -0.014615, 0.003639, -0.000316, 1.00008, -0.000453, -0.000397, 0.001071, -4.4e-05, -0.000505, 0.000217, -2.5e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.041341, 0.255885, 0.004375, -0.064915, 0.080934, -0.044346, 0.008222, -5.2e-05, -0.397863, -0.027161, 0.080398, 0.011882, -0.036223, 0.035478, -0.015621, 0.002474, 1.000006, -0.000445, -3.3e-05, 0.001321, -0.000316, -0.000911, 0.000568, -9.3e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.363999, 0.091828, -0.0522, 0.094998, -0.258824, 0.221134, -0.079557, 0.010379, -0.162965, 0.224952, 0.033651, 0.026968, -0.068517, 0.034762, -0.004378, -0.000574, 0.999785, -0.000339, 0.001237, 0.00114, -0.001302, -0.001219, 0.00126, -0.000267, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.27076, -0.193948, -0.122473, -0.04728, 0.665248, -0.88327, 0.434073, -0.073029, 0.299709, 0.173761, -0.104597, -0.152752, 0.594918, -0.656451, 0.293237, -0.046306, 0.999779, 0.001315, 0.002119, -0.00611, -0.000111, 0.005718, -0.003444, 0.000605, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
]

drone3_trajectory = [
    [2.0, -0.174636, -0.0, 0.0, 1.611348, -2.837632, 2.043351, -0.67782, 0.085561, -0.360907, -0.0, -0.0, -0.512787, 0.947163, -0.655789, 0.203793, -0.023816, 0.999708, -0.0, -0.0, 0.004137, -0.003961, -0.00047, 0.001324, -0.000308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.272572, 0.189826, -0.146963, 0.107151, 0.055479, -0.154404, 0.082306, -0.013833, -0.299541, 0.151335, 0.098027, 0.102862, -0.323423, 0.276093, -0.100431, 0.013392, 0.99966, 0.001386, 0.002762, -0.007126, 0.001966, 0.003014, -0.002001, 0.000342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.365245, -0.083746, -0.067384, -0.202841, 0.385652, -0.278079, 0.090303, -0.010946, 0.16495, 0.232624, -0.063414, -0.010136, 0.077231, -0.085246, 0.034802, -0.004951, 1.000165, 0.000239, -0.001729, 0.000826, 0.000725, -0.000315, -0.000128, 5.1e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.044248, -0.258297, 0.042119, 0.078088, -0.219121, 0.199604, -0.075165, 0.010218, 0.39684, -0.02712, -0.065077, -0.006442, -0.01843, 0.028, -0.012122, 0.001777, 1.000167, -0.000576, -0.001146, 0.001998, -2.2e-05, -0.000843, 0.000343, -3.8e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.388981, -0.050504, 0.046719, 0.004764, 0.089276, -0.103688, 0.042922, -0.006201, 0.083493, -0.245934, -0.021362, 0.021569, 0.00753, -0.013335, 0.006527, -0.001068, 1.000116, -0.000678, -0.000583, 0.001524, -8.7e-05, -0.000654, 0.000283, -3.4e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.201341, 0.218243, 0.057011, -0.033646, -0.017487, 0.031951, -0.015234, 0.002393, -0.346512, -0.123758, 0.07063, -0.005461, 0.007256, 0.002809, -0.004129, 0.000909, 1.000113, -0.000532, -0.000482, 0.001158, -3.7e-05, -0.000483, 0.000192, -2e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.267998, 0.186198, -0.056497, 0.007164, -0.034865, 0.03109, -0.011784, 0.001651, -0.297144, 0.164495, 0.056428, 0.013175, -0.024792, 0.002456, 0.004023, -0.001091, 1.00008, -0.000453, -0.000397, 0.001071, -4.4e-05, -0.000505, 0.000217, -2.5e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.36593, -0.105082, -0.081572, 0.01115, 0.061788, -0.086271, 0.042319, -0.007008, 0.162636, 0.234865, -0.031009, -0.054463, 0.054401, -0.023754, 0.002497, 0.000425, 1.000006, -0.000445, -3.3e-05, 0.001321, -0.000316, -0.000911, 0.000568, -9.3e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.041994, -0.236339, 0.013824, -0.098739, 0.153628, -0.065591, 0.003179, 0.002278, 0.397092, -0.032491, -0.06775, 0.067983, -0.164673, 0.141887, -0.051365, 0.006735, 0.999785, -0.000339, 0.001237, 0.00114, -0.001302, -0.001219, 0.00126, -0.000267, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.395049, -0.065976, 0.155259, 0.291211, -1.129755, 1.238033, -0.553731, 0.087893, 0.085307, -0.251068, -0.062704, -0.020695, 0.432387, -0.576515, 0.283787, -0.047884, 0.999779, 0.001315, 0.002119, -0.00611, -0.000111, 0.005718, -0.003444, 0.000605, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
]

drone4_trajectory = [
    [2.0, 0.796194, 0.0, -0.0, -0.450987, 0.501912, -0.258795, 0.063032, -0.005662, 0.05414, -0.0, 0.0, 3.686545, -6.867749, 5.1551, -1.772761, 0.231267, 0.499864, 0.0, -0.0, 0.00222, -0.002174, -0.000282, 0.000767, -0.00018, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.246792, -0.488584, -0.04065, 0.127054, -0.200301, 0.156553, -0.054051, 0.006913, 0.771127, 0.1159, -0.350135, 0.816172, -1.061957, 0.62962, -0.174116, 0.018186, 0.499837, 0.001043, 0.001568, -0.004644, 0.001102, 0.002206, -0.001381, 0.000229, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.646099, -0.292822, 0.111794, 0.009723, 0.05854, -0.062132, 0.023929, -0.003289, 0.472712, -0.386409, -0.137106, -0.168896, 0.554126, -0.501933, 0.194913, -0.027745, 0.500146, 0.000606, -0.00117, -0.000523, 0.000708, 0.000467, -0.000485, 9.7e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.647922, 0.294551, 0.137112, -0.0206, -0.027381, 0.026109, -0.010362, 0.001472, -0.472415, -0.390481, 0.128644, -0.164108, 0.225513, -0.108406, 0.018365, -0.000192, 0.50017, 6.9e-05, -0.001104, 0.000578, 0.00027, -5.1e-05, -0.00011, 3.1e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.247503, 0.478379, -0.052493, -0.02882, 0.003688, -0.001837, 0.000656, -4.6e-05, -0.761723, 0.138613, 0.16215, 0.134443, -0.293387, 0.211499, -0.067861, 0.008058, 0.500136, -4.3e-05, -0.000715, 0.000551, 9.9e-05, -0.000119, -7e-06, 9e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.799974, -0.001287, -0.157696, 0.006118, -0.000709, 4.4e-05, 0.001371, -0.000361, 0.001791, 0.512897, -0.02399, -0.097781, 0.169362, -0.131898, 0.043377, -0.005121, 0.500053, -3.5e-05, -0.0003, 0.000409, -2.9e-05, -0.000172, 8.2e-05, -1.1e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.247171, -0.476289, -0.048005, 0.019419, 0.016184, -0.006699, 0.000621, 8.4e-05, 0.759068, 0.145469, -0.128677, 0.053746, -0.147262, 0.107993, -0.03049, 0.002809, 0.499954, -9.5e-05, 0.000149, 0.000395, -0.000173, -0.000319, 0.000222, -3.8e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.647026, -0.296506, 0.126441, 0.027312, -0.013084, 0.003215, -0.000229, -8e-05, 0.473009, -0.392975, -0.131123, -0.110074, 0.400743, -0.355774, 0.133844, -0.018351, 0.49987, -0.000251, 0.000575, 0.000506, -0.000364, -0.000541, 0.000427, -7.9e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.647082, 0.295892, 0.125041, -0.029993, 0.032836, -0.036502, 0.015017, -0.002162, -0.473786, -0.399588, 0.155199, 0.003527, -0.320128, 0.464658, -0.235414, 0.04042, 0.499822, -0.00013, 0.001106, 0.000125, -0.000766, -0.000421, 0.000592, -0.000135, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.246575, 0.481393, -0.035827, -0.035406, -0.100391, 0.158564, -0.084401, 0.015221, -0.769622, 0.100946, 0.329113, 0.99804, -3.365896, 3.515297, -1.533414, 0.23997, 0.499868, 0.000809, 0.001196, -0.003682, 0.000146, 0.00321, -0.001977, 0.00035, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
]

drone5_trajectory = [
    [2.0, -0.445688, -0.0, -0.0, -2.91922, 5.577307, -4.22589, 1.4604, -0.191138, 0.66179, 0.0, -0.0, -2.171307, 3.701324, -2.638985, 0.872749, -0.110106, 0.499864, 0.0, -0.0, 0.00222, -0.002174, -0.000282, 0.000767, -0.00018, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.791067, 0.13901, 0.320192, -0.709575, 0.913648, -0.548531, 0.15401, -0.016396, -0.172651, -0.491834, 0.153631, -0.139644, -0.051321, 0.195363, -0.108401, 0.018525, 0.499837, 0.001043, 0.001568, -0.004644, 0.001102, 0.002206, -0.001381, 0.000229, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.085554, 0.483621, 0.052047, 0.118153, -0.428611, 0.391071, -0.152156, 0.021708, -0.794946, -0.080114, 0.145598, 0.294107, -0.505593, 0.346366, -0.107867, 0.012548, 0.500146, 0.000606, -0.00117, -0.000523, 0.000708, 0.000467, -0.000485, 9.7e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.732296, 0.191212, -0.169376, 0.143878, -0.199842, 0.107915, -0.023072, 0.00132, -0.32302, 0.47299, 0.029573, -0.127763, 0.274267, -0.234939, 0.084933, -0.011193, 0.50017, 6.9e-05, -0.001104, 0.000578, 0.00027, -5.1e-05, -0.00011, 3.1e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.53635, -0.360131, -0.119591, -0.09076, 0.247956, -0.185365, 0.060939, -0.007414, 0.592401, 0.332287, -0.087407, -0.009924, -0.107218, 0.115463, -0.046085, 0.006532, 0.500136, -4.3e-05, -0.000715, 0.000551, 9.9e-05, -0.000119, -7e-06, 9e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.401654, -0.443478, 0.100633, 0.076589, -0.135288, 0.10357, -0.033737, 0.003921, 0.694011, -0.252093, -0.153657, 0.035485, 0.024973, -0.039183, 0.019123, -0.003089, 0.500053, -3.5e-05, -0.0003, 0.000409, -2.9e-05, -0.000172, 8.2e-05, -1.1e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.781018, 0.113579, 0.136817, -0.06515, 0.124939, -0.087448, 0.023084, -0.001846, -0.166703, -0.488556, 0.037844, -0.002067, 0.046813, -0.028913, 0.007481, -0.000698, 0.499954, -9.5e-05, 0.000149, 0.000395, -0.000173, -0.000319, 0.000222, -3.8e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.085962, 0.486567, 0.048549, 0.09636, -0.356478, 0.311576, -0.115372, 0.015615, -0.7958, -0.053563, 0.161989, 0.021739, -0.076197, 0.077383, -0.034336, 0.005435, 0.49987, -0.000251, 0.000575, 0.000506, -0.000364, -0.000541, 0.000427, -7.9e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.733901, 0.199813, -0.198895, -0.007707, 0.312604, -0.432963, 0.216371, -0.036933, -0.325828, 0.449798, 0.065772, 0.057125, -0.137446, 0.06702, -0.007078, -0.001461, 0.499822, -0.00013, 0.001106, 0.000125, -0.000766, -0.000421, 0.000592, -0.000135, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.543435, -0.324802, -0.269743, -0.888613, 3.061659, -3.205613, 1.400916, -0.219716, 0.599361, 0.348244, -0.209006, -0.312183, 1.202333, -1.322528, 0.589875, -0.093068, 0.499868, 0.000809, 0.001196, -0.003682, 0.000146, 0.00321, -0.001977, 0.00035, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
]

drone6_trajectory = [
    [2.0, -0.351748, 0.0, -0.0, 3.462845, -6.314038, 4.702279, -1.610703, 0.209612, -0.718783, 0.0, -0.0, -1.276375, 2.544884, -1.926287, 0.658219, -0.084941, 0.499864, 0.0, -0.0, 0.00222, -0.002174, -0.000282, 0.000767, -0.00018, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.544631, 0.338286, -0.28722, 0.711733, -0.930588, 0.540075, -0.145322, 0.014643, -0.599244, 0.341333, 0.208244, -0.220679, 0.102223, 0.03142, -0.039466, 0.008273, 0.499837, 0.001043, 0.001568, -0.004644, 0.001102, 0.002206, -0.001381, 0.000229, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.732913, -0.184233, -0.181888, -0.181203, 0.525883, -0.465608, 0.178865, -0.025272, 0.325088, 0.439697, -0.061321, 0.172167, -0.38433, 0.285941, -0.09396, 0.011515, 0.500146, 0.000606, -0.00117, -0.000523, 0.000708, 0.000467, -0.000485, 9.7e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.085515, -0.486386, 0.048249, -0.132398, 0.196806, -0.093357, 0.015467, -8.1e-05, 0.797855, -0.044432, -0.189231, -0.049989, 0.201125, -0.180434, 0.068169, -0.009332, 0.50017, 6.9e-05, -0.001104, 0.000578, 0.00027, -5.1e-05, -0.00011, 3.1e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.783438, -0.119409, 0.166502, 0.137293, -0.269646, 0.195246, -0.06307, 0.00752, 0.164525, -0.492447, -0.007736, 0.02253, -0.060096, 0.076399, -0.03358, 0.005039, 0.500136, -4.3e-05, -0.000715, 0.000551, 9.9e-05, -0.000119, -7e-06, 9e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.398219, 0.444878, 0.055416, -0.089761, 0.160946, -0.128869, 0.042839, -0.005114, -0.691932, -0.253928, 0.124301, 0.046972, -0.015842, -0.013096, 0.010273, -0.001974, 0.500053, -3.5e-05, -0.0003, 0.000409, -2.9e-05, -0.000172, 8.2e-05, -1.1e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.533603, 0.364383, -0.084901, 0.033712, -0.138785, 0.1031, -0.029814, 0.002892, -0.594528, 0.340464, 0.117363, -0.065259, 0.077095, -0.058721, 0.019225, -0.002296, 0.499954, -9.5e-05, 0.000149, 0.000395, -0.000173, -0.000319, 0.000222, -3.8e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, 0.733226, -0.192315, -0.177176, -0.103096, 0.340617, -0.298561, 0.111874, -0.015293, 0.324655, 0.4585, -0.050849, -0.007356, -0.119338, 0.137624, -0.060903, 0.009527, 0.49987, -0.000251, 0.000575, 0.000506, -0.000364, -0.000541, 0.000427, -7.9e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.08649, -0.494667, 0.067157, 0.015238, -0.25835, 0.376566, -0.190956, 0.032813, 0.795666, -0.067249, -0.163627, 0.133634, -0.161242, 0.058347, 0.006076, -0.004528, 0.499822, -0.00013, 0.001106, 0.000125, -0.000766, -0.000421, 0.000592, -0.000135, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [2.0, -0.789938, -0.148566, 0.304159, 0.833233, -2.773649, 2.895666, -1.261579, 0.197009, 0.172231, -0.472151, -0.148571, -0.386062, 1.645198, -1.808662, 0.811366, -0.129546, 0.499868, 0.000809, 0.001196, -0.003682, 0.000146, 0.00321, -0.001977, 0.00035, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
]


class Uploader:
    def __init__(self):
        self._is_done = False

    def upload(self, trajectory_mem):
        print('Uploading data')
        trajectory_mem.write_data(self._upload_done)

        while not self._is_done:
            time.sleep(0.2)

    def _upload_done(self, mem, addr):
        print('Data uploaded')
        self._is_done = True


def wait_for_position_estimator(scf):
    print('Waiting for estimator to find position...')

    log_config = LogConfig(name='Kalman Variance', period_in_ms=500)
    log_config.add_variable('kalman.varPX', 'float')
    log_config.add_variable('kalman.varPY', 'float')
    log_config.add_variable('kalman.varPZ', 'float')

    var_y_history = [1000] * 10
    var_x_history = [1000] * 10
    var_z_history = [1000] * 10

    threshold = 0.001

    with SyncLogger(scf, log_config) as logger:
        for log_entry in logger:
            data = log_entry[1]

            var_x_history.append(data['kalman.varPX'])
            var_x_history.pop(0)
            var_y_history.append(data['kalman.varPY'])
            var_y_history.pop(0)
            var_z_history.append(data['kalman.varPZ'])
            var_z_history.pop(0)

            min_x = min(var_x_history)
            max_x = max(var_x_history)
            min_y = min(var_y_history)
            max_y = max(var_y_history)
            min_z = min(var_z_history)
            max_z = max(var_z_history)

            # print("{} {} {}".
            #       format(max_x - min_x, max_y - min_y, max_z - min_z))

            if (max_x - min_x) < threshold and (
                    max_y - min_y) < threshold and (
                    max_z - min_z) < threshold:
                break


def reset_estimator(cf):
    cf.param.set_value('kalman.resetEstimation', '1')
    time.sleep(0.1)
    cf.param.set_value('kalman.resetEstimation', '0')

    wait_for_position_estimator(cf)


def activate_high_level_commander(cf):
    cf.param.set_value('commander.enHighLevel', '1')


def activate_mellinger_controller(cf):
    cf.param.set_value('stabilizer.controller', '2')


def upload_trajectory(cf, trajectory_id, trajectory):
    trajectory_mem = cf.mem.get_mems(MemoryElement.TYPE_TRAJ)[0]

    total_duration = 0
    for row in trajectory:
        duration = row[0]
        x = Poly4D.Poly(row[1:9])
        y = Poly4D.Poly(row[9:17])
        z = Poly4D.Poly(row[17:25])
        yaw = Poly4D.Poly(row[25:33])
        trajectory_mem.poly4Ds.append(Poly4D(duration, x, y, z, yaw))
        total_duration += duration

    Uploader().upload(trajectory_mem)
    cf.high_level_commander.define_trajectory(trajectory_id, 0,
                                              len(trajectory_mem.poly4Ds))
    return total_duration

def run_sequence(cf, trajectory_id, duration):
    commander = cf.high_level_commander

    try:
        relative = True
        commander.start_trajectory(trajectory_id, 1.0, relative)
        time.sleep(duration)
        commander.land(0.0, 5.0)
        time.sleep(5)
        commander.stop()

    except KeyboardInterrupt:
        print("Emergency stop!")
        commander.stop()  # emergency stop

    finally:
        commander.stop()


if __name__ == '__main__':
    cflib.crtp.init_drivers(enable_debug_driver=False)

    # Create a thread pool to run drones in parallel
    with SyncCrazyflie(URI_DRONE1, cf=Crazyflie(rw_cache='./cache')) as scf_drone1, \
         SyncCrazyflie(URI_DRONE2, cf=Crazyflie(rw_cache='./cache')) as scf_drone2, \
         SyncCrazyflie(URI_DRONE3, cf=Crazyflie(rw_cache='./cache')) as scf_drone3, \
         SyncCrazyflie(URI_DRONE4, cf=Crazyflie(rw_cache='./cache')) as scf_drone4, \
         SyncCrazyflie(URI_DRONE5, cf=Crazyflie(rw_cache='./cache')) as scf_drone5, \
         SyncCrazyflie(URI_DRONE6, cf=Crazyflie(rw_cache='./cache')) as scf_drone6:

        drone1 = scf_drone1.cf
        drone2 = scf_drone2.cf
        drone3 = scf_drone3.cf
        drone4 = scf_drone4.cf
        drone5 = scf_drone5.cf
        drone6 = scf_drone6.cf
        drone1_trajectory_id = 1
        drone2_trajectory_id = 2
        drone3_trajectory_id = 3
        drone4_trajectory_id = 4
        drone5_trajectory_id = 5
        drone6_trajectory_id = 6

        activate_high_level_commander(drone1)
        activate_high_level_commander(drone2)
        activate_high_level_commander(drone3)
        activate_high_level_commander(drone4)
        activate_high_level_commander(drone5)
        activate_high_level_commander(drone6)

        hlc_drone1 = scf_drone1.cf.high_level_commander
        hlc_drone2 = scf_drone2.cf.high_level_commander
        hlc_drone3 = scf_drone3.cf.high_level_commander
        hlc_drone4 = scf_drone4.cf.high_level_commander
        hlc_drone5 = scf_drone5.cf.high_level_commander
        hlc_drone6 = scf_drone6.cf.high_level_commander

        reset_estimator(drone1)
        reset_estimator(drone2)
        reset_estimator(drone3)
        reset_estimator(drone4)
        reset_estimator(drone5)
        reset_estimator(drone6)
        
        # Upload the trajectories
        drone1_duration = upload_trajectory(drone1, drone1_trajectory_id, drone1_trajectory)
        drone2_duration = upload_trajectory(drone2, drone2_trajectory_id, drone2_trajectory)
        drone3_duration = upload_trajectory(drone3, drone3_trajectory_id, drone3_trajectory)
        drone4_duration = upload_trajectory(drone4, drone4_trajectory_id, drone4_trajectory)
        drone5_duration = upload_trajectory(drone5, drone5_trajectory_id, drone5_trajectory)
        drone6_duration = upload_trajectory(drone6, drone6_trajectory_id, drone6_trajectory)

        print('The drone1 sequence is {:.1f} seconds long'.format(drone1_duration))
        print('The drone2 sequence is {:.1f} seconds long'.format(drone2_duration))
        print('The drone3 sequence is {:.1f} seconds long'.format(drone3_duration))
        print('The drone4 sequence is {:.1f} seconds long'.format(drone4_duration))
        print('The drone5 sequence is {:.1f} seconds long'.format(drone5_duration))
        print('The drone6 sequence is {:.1f} seconds long'.format(drone6_duration))

        hlc_drone1.takeoff(1, 5.0)
        hlc_drone2.takeoff(1, 5.0)
        hlc_drone3.takeoff(1, 5.0)
        hlc_drone4.takeoff(0.5, 5.0)
        hlc_drone5.takeoff(0.5, 5.0)
        hlc_drone6.takeoff(0.5, 5.0)
        time.sleep(5)
               #may have to change these values
        hlc_drone1.go_to(0.4,0.0,1.0, 0, 5.0, relative=False)
        hlc_drone2.go_to(-0.19999999999999993,0.3464101615137755,1.0, 0, 5.0, relative=False)
        hlc_drone3.go_to(-0.20000000000000018,-0.34641016151377535,1.0, 0, 5.0, relative=False)
        hlc_drone4.go_to(0.8,0.0,0.5, 0, 5.0, relative=False)
        hlc_drone5.go_to(-0.39999999999999986,0.692820323027551,0.5, 0, 5.0, relative=False)
        hlc_drone6.go_to(-0.40000000000000036,-0.6928203230275507,0.5, 0, 5.0, relative=False)
        time.sleep(5)

        # Use ThreadPoolExecutor to run all drones simultaneously
        with concurrent.futures.ThreadPoolExecutor(max_workers=6) as executor:
            futures = []
            # Submit the sequences for each drone to run in parallel
            futures.append(executor.submit(run_sequence, drone1, drone1_trajectory_id, drone1_duration))
            futures.append(executor.submit(run_sequence, drone2, drone2_trajectory_id, drone2_duration))
            futures.append(executor.submit(run_sequence, drone3, drone3_trajectory_id, drone3_duration))
            futures.append(executor.submit(run_sequence, drone4, drone4_trajectory_id, drone4_duration))
            futures.append(executor.submit(run_sequence, drone5, drone5_trajectory_id, drone5_duration))
            futures.append(executor.submit(run_sequence, drone6, drone6_trajectory_id, drone6_duration))
            
            # Wait for all drones to finish
            concurrent.futures.wait(futures)
